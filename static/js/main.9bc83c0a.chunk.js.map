{"version":3,"sources":["components/Header/Header.js","context/CategoriesContext.js","context/EventsContext.js","components/Form/Form.js","components/Event/Event.js","components/EventsList/EventsList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriesContext","React","createContext","CategoriesConsumer","Consumer","CategoriesProvider","token","state","categories","getCategories","a","url","axios","get","setState","data","this","Provider","value","props","children","Component","EventsContext","EventsConsumer","EventsProvider","sortBy","events","getEvents","search","name","category","Form","handleDataEvents","e","target","onSubmit","preventDefault","uk-margin","type","placeholder","onChange","map","key","id","name_localized","Event","event","text","description","length","substring","concat","logo","src","alt","rel","href","EventsList","uk-grid","uk-height-match","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAQeA,G,MANA,kBACd,4BAAQC,UAAU,aACjB,wBAAIA,UAAU,kBAAd,mD,kFCAIC,EAAoBC,IAAMC,gBACnBC,EAAqBH,EAAkBI,SAoCrCC,E,2MAhCbC,MAAQ,uB,EAERC,MAAQ,CACNC,WAAY,I,EAOdC,c,qBAAgB,8BAAAC,EAAA,4DACVC,EADU,6DACkD,EAAKL,OADvD,SAESM,IAAMC,IAAIF,GAFnB,OAEVH,EAFU,OAId,EAAKM,SAAS,CACZN,WAAYA,EAAWO,KAAKP,aALhB,yC,mFAHdQ,KAAKP,kB,+BAaL,OACE,kBAACT,EAAkBiB,SAAnB,CACEC,MAAO,CACLV,WAAaQ,KAAKT,MAAMC,aAGzBQ,KAAKG,MAAMC,SALd,S,GAvB2BC,aCH3BC,EAAgBrB,IAAMC,gBACfqB,EAAiBD,EAAclB,SAqC7BoB,E,2MAhCblB,MAAQ,uB,EACRmB,OAAS,O,EACTlB,MAAQ,CACNmB,OAAS,I,EAGXC,U,sCAAY,WAAOC,GAAP,iBAAAlB,EAAA,4DACNC,EADM,4DACqDiB,EAAOC,KAD5D,uBAC+ED,EAAOE,SADtF,oBAC0G,EAAKL,OAD/G,kBAC+H,EAAKnB,OADpI,SAGWM,IAAMD,GAHjB,OAGJe,EAHI,OAOV,EAAKZ,SAAS,CACZY,OAAQA,EAAOX,KAAKW,SARZ,yC,8HAaV,OACE,kBAACJ,EAAcL,SAAf,CACEC,MAAO,CACLQ,OAAQV,KAAKT,MAAMmB,OACnBC,UAAWX,KAAKW,YAGjBX,KAAKG,MAAMC,c,GA5BSC,aCkFdU,E,2MApFbxB,MAAQ,CACNsB,KAAM,GACNC,SAAU,I,EAIZE,iBAAmB,SAAAC,GACjB,EAAKnB,SAAL,eACGmB,EAAEC,OAAOL,KAAQI,EAAEC,OAAOhB,S,wEAIrB,IAAD,OACP,OACE,kBAACK,EAAD,KACG,SAACL,GAEA,OAEE,0BACEiB,SAAU,SAAAF,GACRA,EAAEG,iBACFlB,EAAMS,UAAU,EAAKpB,SAGvB,8BAAUR,UAAU,eAElB,4BAAQA,UAAU,4BAAlB,6CAIA,yBAAKA,UAAU,6BAAf,IAEE,yBAAKA,UAAU,YAAYsC,YAAU,QACnC,2BACER,KAAK,OACL9B,UAAU,WACVuC,KAAK,OACLC,YAAY,qBACZC,SAAU,EAAKR,oBAInB,yBAAKjC,UAAU,YAAYsC,YAAU,QACnC,4BACER,KAAK,WACL9B,UAAU,YACVuC,KAAK,OACLE,SAAU,EAAKR,kBAEf,4BAAQd,MAAM,IAAd,yBACA,kBAACf,EAAD,KACG,SAACe,GAAD,OACCA,EAAMV,WAAWiC,IAAI,SAAAX,GAAQ,OAC3B,4BACEY,IAAKZ,EAASa,GACdzB,MAAOY,EAASa,IAEfb,EAASc,sBAQtB,6BACE,2BACE7C,UAAU,6BACVuC,KAAK,SACLpB,MAAM,4B,GAvETG,aCwBJwB,EA3BD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACPC,EAAQD,EAAME,YAAdD,KAIP,OAHKA,IACmBA,EAApBA,EAAKE,OAAS,IAAaF,EAAKG,UAAU,EAAG,KAAKC,OAAO,OAAgB,MAG3E,6BACE,yBAAKpD,UAAU,iCACb,yBAAKA,UAAU,qBACZ+C,EAAMM,KAAO,yBAAKC,IAAKP,EAAMM,KAAKzC,IAAK2C,IAAKR,EAAMjB,OAAW,MAGhE,yBAAK9B,UAAU,sDACb,wBAAIA,UAAU,iBAAiB+C,EAAMjB,KAAKkB,MAC1C,2BAAIA,IAGN,yBAAKhD,UAAU,kBACb,uBAAGmC,OAAO,SAASqB,IAAI,sBAAsBC,KAAMV,EAAMnC,IAAKZ,UAAU,iCAAxE,wBCEK0D,EAlBI,WACjB,OACE,yBAAK1D,UAAU,uBAAuB2D,UAAQ,OAAOC,kBAAgB,yBAArE,IACE,kBAACpC,EAAD,KACG,SAACL,GAEA,OADA0C,QAAQC,IAAI3C,GACLA,EAAMQ,OAAOe,IAAI,SAAAK,GAAK,OAC3B,kBAAC,EAAD,CACEJ,IAAKI,EAAMH,GACXG,MAAOA,UCQNgB,MAdf,WACE,OACE,kBAAC,EAAD,SACE,kBAAC,EAAD,SACE,kBAAC,EAAD,MACA,yBAAK/D,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QALN,MCGgBgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9bc83c0a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n <header className='uk-margin'>\n  <h1 className='uk-text-center'>Events Searcher in React with EventBrite API</h1>\n </header>\n)\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n//create context\nconst CategoriesContext = React.createContext();\nexport const CategoriesConsumer = CategoriesContext.Consumer;\n\nclass CategoriesProvider extends Component {\n\n  token = 'H3XNKDXWLEAP3RPVC4X6'\n\n  state = {\n    categories: []\n  }\n\n  componentDidMount() {\n    this.getCategories();\n  }\n\n  getCategories = async () => { //await siempre tiene que ir con una función asincrona. Es lo mismo que la forma antigua de get y then.\n    let url = `https://www.eventbriteapi.com/v3/categories/?token=${this.token}`/*&locale=es_ES*/ //ojo, no son comillas, son: ``\n    let categories = await axios.get(url); // hace la consulta, el método get viene por defecto, se puede poner o no.\n    //console.log(categories);\n    this.setState({\n      categories: categories.data.categories\n    })\n  }\n\n  render() {\n    return(\n      <CategoriesContext.Provider\n        value={{\n          categories : this.state.categories,\n        }}\n      >\n        {this.props.children} {/*En APP.js, el hijo tiene que estar en su lugar*/}\n      </CategoriesContext.Provider>\n    );\n  }\n}\n\nexport default CategoriesProvider;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n//create context\nconst EventsContext = React.createContext();\nexport const EventsConsumer = EventsContext.Consumer;\n\n\nclass EventsProvider extends Component {\n\n  token = 'H3XNKDXWLEAP3RPVC4X6'\n  sortBy = 'date'\n  state = {\n    events : []\n  }\n\n  getEvents = async (search) => { // se ejecutará cuando el usuario presione el botón\n    let url = `https://www.eventbriteapi.com/v3/events/search/?q=${search.name}&categories=${search.category}&sort_by=${this.sortBy}&token=${this.token}`;\n    // consultar la API con la URL.\n    const events = await axios(url); // hace la consulta, el método get viene por defecto, se puede poner o no.\n/*    console.log(events);\n    console.log(events.data.events)*/\n\n    this.setState({\n      events: events.data.events\n    })\n  }\n\n  render() {\n    return(\n      <EventsContext.Provider\n        value={{\n          events: this.state.events,\n          getEvents: this.getEvents // pasamos la función\n        }}\n      >\n        {this.props.children}\n      </EventsContext.Provider>\n    );\n  }\n}\n\nexport default EventsProvider;","import React, { Component } from 'react';\nimport { CategoriesConsumer } from '../../context/CategoriesContext';\nimport { EventsConsumer } from '../../context/EventsContext';\n\n\nclass Form extends Component {\n  state = {\n    name: '',\n    category: ''\n  }\n\n  // si el usuario agrega un evento o categoría\n  handleDataEvents = e => {\n    this.setState({\n      [e.target.name] : e.target.value\n    })\n  }\n\n  render() {\n    return(\n      <EventsConsumer>\n        {(value) => {\n          //console.log(value)\n          return(\n\n            <form\n              onSubmit={e => { // importante que sea una arrow function para que se ejecute al esperar el submit\n                e.preventDefault();\n                value.getEvents(this.state) // getEvents es una función que viene del Provider de eventsContext.\n              }}\n            >\n              <fieldset className='uk-fieldset'>\n\n                <legend className='uk-legend uk-text-center'> {/*legend crea un titulo para los campos de fieldset*/}\n                  Search your event by name or category\n                </legend>\n\n                <div className='uk-column-1-3@m uk-margin'> {/*3 columnas*/}\n\n                  <div className='uk-margin' uk-margin='true'>\n                    <input\n                      name='name'\n                      className='uk-input'\n                      type='text'\n                      placeholder='Event name or city'\n                      onChange={this.handleDataEvents}\n                    />\n                  </div>\n\n                  <div className='uk-margin' uk-margin='true'>\n                    <select\n                      name='category'\n                      className='uk-select'\n                      type='text'\n                      onChange={this.handleDataEvents}\n                    >\n                      <option value=''>-- Select category --</option>\n                      <CategoriesConsumer>\n                        {(value) => ( /*tiene que ser una función*/\n                          value.categories.map(category => (\n                            <option\n                              key={category.id}\n                              value={category.id}\n                            >\n                              {category.name_localized}\n                            </option>\n                          ))\n                        )}\n                      </CategoriesConsumer>\n                    </select>\n                  </div>\n\n                  <div>\n                    <input\n                      className='uk-button uk-button-danger'\n                      type='submit'\n                      value='Search events'\n                    />\n                  </div>\n\n                </div>\n              </fieldset>\n            </form>\n          ) // el return envuelve todo el componente\n        }}\n      </EventsConsumer>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\n\nconst Event = ({event}) => {\n    let {text} = event.description;\n    if(text) {\n      text.length > 250 ? text = text.substring(0, 230).concat('...') : text = null; //limitar a 250 carácteres.\n    }\n  return (\n    <div>\n      <div className='uk-card-small uk-card-default'>\n        <div className='uk-card-media-top'>\n          {event.logo ? <img src={event.logo.url} alt={event.name} /> : null}\n        </div>\n\n        <div className='uk-card-body uk-flex uk-flex-column uk-flex-middle'>\n          <h3 className='uk-card-title'>{event.name.text}</h3>\n          <p>{text}</p>\n        </div>\n\n        <div className='uk-card-footer'>{/*uk-position-bottom*/}\n          <a target='_blank' rel='noopener noreferrer' href={event.url} className='uk-button uk-button-secondary'>\n            More information\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Event;","import React from 'react';\nimport { EventsConsumer } from '../../context/EventsContext';\nimport Event from '../Event/Event';\n\nconst EventsList = () => {\n  return (\n    <div className='uk-child-width-1-3@m' uk-grid='true' uk-height-match=\"target: .uk-card-body\"> {/*uk-child-width-1-2@s*/}\n      <EventsConsumer>\n        {(value) => {\n          console.log(value);\n          return value.events.map(event => (\n            <Event\n              key={event.id} //siempre tiene que tener un key único\n              event={event}\n            />\n          ))\n        }}\n      </EventsConsumer>\n    </div>\n  );\n}\n\nexport default EventsList;","import React from 'react';\nimport Header from './components/Header/Header';\nimport Form from './components/Form/Form';\nimport CategoriesProvider from './context/CategoriesContext';\nimport EventsProvider from './context/EventsContext';\nimport EventsList from './components/EventsList/EventsList';\n\nfunction App() {\n  return (\n    <EventsProvider> {/*eventos puede rodear a categorías o al revés, no importa, ambos tendrán acceso a todo. Lo importante es que siempre hay que retornar un hijo.*/}\n      <CategoriesProvider> {/*<Fragment> context lo sustituye*/}\n        <Header />\n        <div className='uk-container'>\n          <Form />\n          <EventsList />\n        </div>\n      </CategoriesProvider> {/*</Fragment>*/}\n    </EventsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}